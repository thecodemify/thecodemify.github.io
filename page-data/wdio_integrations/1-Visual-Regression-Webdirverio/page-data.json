{"componentChunkName":"component---src-templates-docs-js","path":"/wdio_integrations/1-Visual-Regression-Webdirverio","result":{"data":{"site":{"siteMetadata":{"title":"Codemify | Software QA Automation Academy","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"2a17bbf0-48ea-5f39-a3b8-6502424db8c1","title":"1. Visual Regression","slug":"/wdio_integrations/1-Visual-Regression-Webdirverio"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"1. Visual Regression\",\n  \"metaTitle\": \"WebdriverIO Visual Regression\",\n  \"metaDescription\": \"Learn how to automation Visual Regression with Codemify\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"How to install visual regression tool:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install wdio-image-comparison-service library \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"    npm install wdio-image-comparison-service\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Import path library into your configuration file(likely to be wdio.conf.js)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"    const { join } = require('path');\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update services section in your config file to have an extra value(example contains chromedriver as a first one)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"    services: [\\n        ['chromedriver'],\\n        ['image-comparison', \\n        // The options\\n        {\\n            // Some options, see the docs for more\\n            baselineFolder: join(process.cwd(), './tests/sauceLabsBaseline/'),\\n            formatImageName: '{tag}-{logName}-{width}x{height}',\\n            screenshotPath: join(process.cwd(), '.tmp/'),\\n            savePerInstance: true,\\n            autoSaveBaseline: true,\\n            blockOutStatusBar: true,\\n            blockOutToolBar: true,\\n            // ... more options\\n        }], \\n    ],\\n\")), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create new spec file and add these test cases into it\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"describe('Example', () => {\\n    it('should save some screenshots', () => {\\n        browser.url('https://Codemify.com/interview/interview');\\n        // Save a screen\\n          browser.saveScreen('examplePaged', { /* some options */ });\\n\\n        // Save an element\\n        browser.saveElement($('.rightSideBarUL'), 'firstButtonElement', { /* some options */ });\\n\\n        // Save a full page screenshot\\n          browser.saveFullPageScreen('fullPage', { /* some options */ });\\n\\n        //   // Save a full page screenshot with all tab executions\\n          browser.saveTabbablePage('save-tabbable', { /* some options, use the same options as for saveFullPageScreen */ });\\n    });\\n\\n    it('should compare successful with a baseline', () => {\\n        browser.url('https://Codemify.com/interview/interview');\\n        // Check a screen\\n          expect(browser.checkScreen('examplePaged', { /* some options */ })).toEqual(0);\\n\\n        // Check an element\\n        expect(browser.checkElement($('.rightSideBarUL'), 'firstButtonElement', { /* some options */ })).toEqual(0);\\n\\n        // Check a full page screenshot\\n          expect(browser.checkFullPageScreen('fullPage', { /* some options */ })).toEqual(0);\\n\\n        //   // Check a full page screenshot with all tab executions\\n          expect(browser.checkTabbablePage('check-tabbable', { /* some options, use the same options as for checkFullPageScreen */ })).toEqual(0);\\n    });\\n});\\n\")), mdx(\"p\", null, \"Bingo! Now it all works. Notice that there are quite a few ways to do visual regression. You can go as granular as one element verification.\"), mdx(\"p\", null, \"Enjoy it!\\n@Codemify - telegram, instagram, youtube\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-install-visual-regression-tool","title":"How to install visual regression tool:"}]},"parent":{"__typename":"File","relativePath":"wdio_integrations/1-Visual-Regression-Webdirverio.md"},"frontmatter":{"metaTitle":"WebdriverIO Visual Regression","metaDescription":"Learn how to automation Visual Regression with Codemify"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/automation","title":"Automation testing"}}},{"node":{"fields":{"slug":"/automation/4-WaitUntil usage examples","title":"4. How to use waitUntil?"}}},{"node":{"fields":{"slug":"/about","title":"About us"}}},{"node":{"fields":{"slug":"/api","title":"API Testing"}}},{"node":{"fields":{"slug":"/interview","title":"Interview"}}},{"node":{"fields":{"slug":"/","title":"Welcome to Codemify Academy"}}},{"node":{"fields":{"slug":"/starter","title":"Starter"}}},{"node":{"fields":{"slug":"/nodejs","title":"NodeJS"}}},{"node":{"fields":{"slug":"/introduction","title":"Courses Information"}}},{"node":{"fields":{"slug":"/wdio_integrations","title":"WDIO Integrations"}}},{"node":{"fields":{"slug":"/git","title":"Git, and how to use it"}}},{"node":{"fields":{"slug":"/wdio_integrations/1-Visual-Regression-Webdirverio","title":"1. Visual Regression"}}},{"node":{"fields":{"slug":"/starter/2-Bug-reports","title":"2. Bug reports"}}},{"node":{"fields":{"slug":"/starter/1-Starter","title":"1. QA Basics"}}},{"node":{"fields":{"slug":"/starter/3-Types-of-testing","title":"3. Testing types and methods"}}},{"node":{"fields":{"slug":"/git/1-git-vs-github","title":"Git and Github"}}},{"node":{"fields":{"slug":"/nodejs/1-how-to-install-nodejs","title":"1. How to install NodeJS and npm"}}},{"node":{"fields":{"slug":"/git/2-git-situations-for-newbies","title":"Git situations for newbies"}}},{"node":{"fields":{"slug":"/interview/interview","title":"Interview questions"}}},{"node":{"fields":{"slug":"/automation/1-Automation-with-WebdriverIO","title":"1. Automation with WebdriverIO"}}},{"node":{"fields":{"slug":"/git/3-git-how-to-check-pull-requests","title":"Git how to check pull requests"}}},{"node":{"fields":{"slug":"/automation/3-What-is-wdio-conf-js","title":"3. What is wdio.conf.js?"}}},{"node":{"fields":{"slug":"/automation/6-CSS-Selectors","title":"6. CSS Selectors for Automation"}}},{"node":{"fields":{"slug":"/automation/5-How-to-use-map-method-in-automation","title":"5. How to use MAP?"}}},{"node":{"fields":{"slug":"/automation/8-Assertions","title":"8. Assertions"}}},{"node":{"fields":{"slug":"/automation/7-The-power-of-XPath","title":"7. The Power Of XPath"}}},{"node":{"fields":{"slug":"/automation/2-Page-Object-Model copy","title":"2. Page Object Model"}}},{"node":{"fields":{"slug":"/api/1-What-is-api","title":"1. What is API?"}}},{"node":{"fields":{"slug":"/automation/9-Errors-explanation","title":"9. JS Automation test errors explanation"}}},{"node":{"fields":{"slug":"/api/2. API-testing-with-postman","title":"2. API testing with postman?"}}},{"node":{"fields":{"slug":"/api/3-How-to-test-apis","title":"4. How to test API?"}}},{"node":{"fields":{"slug":"/api/4-API-status-codes","title":"3. API status codes"}}},{"node":{"fields":{"slug":"/about/about","title":"Privacy Policy"}}}]}},"pageContext":{"id":"2a17bbf0-48ea-5f39-a3b8-6502424db8c1"}},"staticQueryHashes":["1685914912","1685914912","2619113677","2619113677","3706406642","3706406642"]}