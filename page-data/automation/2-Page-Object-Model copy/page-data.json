{"componentChunkName":"component---src-templates-docs-js","path":"/automation/2-Page-Object-Model copy","result":{"data":{"site":{"siteMetadata":{"title":"Codemify | Software QA Automation Academy","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"222b31ba-74aa-5cdb-9e75-e8135edb96e0","title":"2. Page Object Model","slug":"/automation/2-Page-Object-Model copy"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"2. Page Object Model\",\n  \"metaTitle\": \"Implementation of page object model to WebdriverIO\",\n  \"metaDescription\": \"How create page object for Automation framework\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What is page object?\"), mdx(\"h2\", null, \"Why do we need it?\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Organize your code(easy to read, easy to understand)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Avoid duplicates\")), mdx(\"p\", null, \"Duplicated code from previous article:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"$('button=Not Now')...........\\n\")), mdx(\"p\", null, \"This selector was used twice in just a one simplest test case. Imagine that you have 500 test cases, I'm pretty sure you will have hundreds of dups. In order to avoid it, we are going to implement a Software Design Patterns which is called Page Object Model.\"), mdx(\"p\", null, \"Page Object Model - is a very popular design pattern used that we will use in building our automation frameworks. In a few words: it's a way to structure code.\\nIn a previous article you saw us running basic automation test of instagram website. It works fine, but looks a little ugly and some code is duplicated.\"), mdx(\"p\", null, \"Based on a previous article, your framework should look like this:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"node_modules (all of our modules/packages/libraries live there)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"specs (all of tests live there)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"package-lock.json (history of your npm updates - not used much)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"package.json (basic information about your framework with list of modules/packages/libraries we've installed)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wdio.cong.js (actual configurations file where we specify base information like: timeouts, baseUrl etc)\")), mdx(\"h3\", null, \"Now we need to add a new folder page_objects folder and login folder inside of it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"mkdir -p ./page_objects/login\\n\")), mdx(\"h3\", null, \"Create login-page.js file inside of that folder\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"touch ./page_objects/login/login-page.js\\n\")), mdx(\"h3\", null, \"Paste following code into it\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"\\\"use strict\\\";\\n\\nclass Login {\\n    // Reusable selector getters that will help us to avoid selector duplicates\\n    get usernameTxt() {return $('[name=\\\"username\\\"]');}\\n    get passwordTxt() {return $('[name=\\\"password\\\"]');}\\n    get loginLnk() {return $('div=Log In');}\\n    get loginErrorLbl() {return $('#slfErrorAlert');}\\n\\n    // Helper method to avoid code duplication\\n    login(username, password){\\n        this.usernameTxt.setValue(username);\\n        this.passwordTxt.setValue(password);\\n        this.loginLnk.click();\\n    }\\n}\\nmodule.exports = new Login();\\n\")), mdx(\"h3\", null, \"Let's update our test with login helper method and selector from page object:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const LoginPage = require('../../page_objects/login/login-page');\\nconst CommonPage = require('../../page_objects/common/common-page');\\nconst ProfilePage = require('../../page_objects/profile/profile-page');\\nconst loginUrl = 'https://www.instagram.com/accounts/login/?source=auth_switcher';\\nconst timeout = 20000;\\n\\ndescribe('Login', () => {\\n    // This hook runs after each test\\n    afterEach(() => {\\n        // Deleting cookies after each session will allow us to have new session before next test starts\\n        browser.deleteCookies();\\n    });\\n\\n    it('should not be able to login with none matching credentials', () => {\\n        // Declare and assign username and password consts\\n        const username = 'YourUsername';\\n        const password = 'YourPassword';\\n\\n        // Navigate to login page\\n        browser.url(loginUrl);\\n\\n        // Type in username, password, and click login\\n        LoginPage.login(username, password);\\n\\n        // Wait for error message\\n        LoginPage.loginErrorLbl.waitForDisplayed();\\n    })\\n});\\n\")), mdx(\"p\", null, \"You should be able to run your tests with a same command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"./node_modules/.bin/wdio wdio.conf.js\\n\\n// Or if you wanna run single spec file\\n./node_modules/.bin/wdio wdio.conf.js --spec spec/login/login-spec.js\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-is-page-object","title":"What is page object?","items":[{"url":"#why-do-we-need-it","title":"Why do we need it?","items":[{"url":"#now-we-need-to-add-a-new-folder-page_objects-folder-and-login-folder-inside-of-it","title":"Now we need to add a new folder page_objects folder and login folder inside of it:"},{"url":"#create-login-pagejs-file-inside-of-that-folder","title":"Create login-page.js file inside of that folder"},{"url":"#paste-following-code-into-it","title":"Paste following code into it"},{"url":"#lets-update-our-test-with-login-helper-method-and-selector-from-page-object","title":"Let's update our test with login helper method and selector from page object:"}]}]}]},"parent":{"__typename":"File","relativePath":"automation/2-Page-Object-Model copy.md"},"frontmatter":{"metaTitle":"Implementation of page object model to WebdriverIO","metaDescription":"How create page object for Automation framework"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/automation","title":"Automation testing"}}},{"node":{"fields":{"slug":"/automation/4-WaitUntil usage examples","title":"4. How to use waitUntil?"}}},{"node":{"fields":{"slug":"/wdio_integrations/1-Visual-Regression-Webdirverio","title":"1. Visual Regression"}}},{"node":{"fields":{"slug":"/about","title":"About us"}}},{"node":{"fields":{"slug":"/wdio_integrations/2-Docker","title":"2. How to Dockerize WDIO"}}},{"node":{"fields":{"slug":"/introduction","title":"Courses Information"}}},{"node":{"fields":{"slug":"/starter/3-Types-of-testing","title":"3. Testing types and methods"}}},{"node":{"fields":{"slug":"/api","title":"API Testing"}}},{"node":{"fields":{"slug":"/","title":"Welcome to Codemify Academy"}}},{"node":{"fields":{"slug":"/interview","title":"Interview"}}},{"node":{"fields":{"slug":"/wdio_integrations/4-Video-reporter","title":"4. Video reporter"}}},{"node":{"fields":{"slug":"/about/privacy-policy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/wdio_integrations/3-How-to-install-allure-reporter","title":"3. Allure reporter"}}},{"node":{"fields":{"slug":"/starter","title":"Starter"}}},{"node":{"fields":{"slug":"/about/course-agreement","title":"Course Agreement"}}},{"node":{"fields":{"slug":"/about/Terms-of-use","title":"Terms of use"}}},{"node":{"fields":{"slug":"/nodejs","title":"NodeJS"}}},{"node":{"fields":{"slug":"/starter/4-Test-cases","title":"4. Test cases"}}},{"node":{"fields":{"slug":"/api/1-What-is-api","title":"1. What is API?"}}},{"node":{"fields":{"slug":"/automation/1-Automation-with-WebdriverIO","title":"1. Automation with WebdriverIO"}}},{"node":{"fields":{"slug":"/wdio_integrations","title":"WDIO Integrations"}}},{"node":{"fields":{"slug":"/git","title":"Git, and how to use it"}}},{"node":{"fields":{"slug":"/starter/2-Bug-reports","title":"2. Bug reports"}}},{"node":{"fields":{"slug":"/starter/1-Starter","title":"1. QA Basics"}}},{"node":{"fields":{"slug":"/git/1-git-vs-github","title":"Git and Github"}}},{"node":{"fields":{"slug":"/nodejs/1-how-to-install-nodejs","title":"1. How to install NodeJS and npm"}}},{"node":{"fields":{"slug":"/git/2-git-situations-for-newbies","title":"Git situations for newbies"}}},{"node":{"fields":{"slug":"/interview/interview","title":"Interview questions"}}},{"node":{"fields":{"slug":"/git/3-git-how-to-check-pull-requests","title":"Git how to check pull requests"}}},{"node":{"fields":{"slug":"/automation/3-What-is-wdio-conf-js","title":"3. What is wdio.conf.js?"}}},{"node":{"fields":{"slug":"/automation/6-CSS-Selectors","title":"6. CSS Selectors for Automation"}}},{"node":{"fields":{"slug":"/automation/5-How-to-use-map-method-in-automation","title":"5. How to use MAP?"}}},{"node":{"fields":{"slug":"/automation/8-Assertions","title":"8. Assertions"}}},{"node":{"fields":{"slug":"/automation/7-The-power-of-XPath","title":"7. The Power Of XPath"}}},{"node":{"fields":{"slug":"/automation/2-Page-Object-Model copy","title":"2. Page Object Model"}}},{"node":{"fields":{"slug":"/automation/9-Errors-explanation","title":"9. JS Automation test errors explanation"}}},{"node":{"fields":{"slug":"/api/2. API-testing-with-postman","title":"2. API testing with postman?"}}},{"node":{"fields":{"slug":"/api/3-How-to-test-apis","title":"4. How to test API?"}}},{"node":{"fields":{"slug":"/api/4-API-status-codes","title":"3. API status codes"}}}]}},"pageContext":{"id":"222b31ba-74aa-5cdb-9e75-e8135edb96e0"}},"staticQueryHashes":["1685914912","1685914912","2619113677","2619113677","3706406642","3706406642"]}