{"componentChunkName":"component---src-templates-docs-js","path":"/automation/8-Assertions","result":{"data":{"site":{"siteMetadata":{"title":"Codemify | Software QA Automation Academy","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"12fbf999-3a63-595a-bd10-3521c754f284","title":"8. Assertions","slug":"/automation/8-Assertions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"8. Assertions\",\n  \"metaTitle\": \"WebdriverIO assertions with Chai and not only\",\n  \"metaDescription\": \"Learn how to use assertions with Codemify\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Assertions\"), mdx(\"p\", null, \"Assertion - is a way of verification. We can verify that data exist on the page, url is the one we expect to have and.... pretty much anything else.\"), mdx(\"h1\", null, \"WairFor... as a way of assertion\"), mdx(\"p\", null, \"Let's start with making sure elements existence on the page. For this purpose, we don't even need to use any extra modules. We can simply use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"waitForDisplayed(); - waits until selector is displayed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"waitForExist(); - waits until selector exists\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"waitForClickable(); - waits until selector is clickable\")), mdx(\"h1\", null, \"Assert module as a way of assertion\"), mdx(\"p\", null, \"For more complicated cases where we need to verify, let's say url === '\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.google.com'\"\n  }), \"https://www.google.com'\"), \", we could use chai module. Don't forget to install it if you haven't done so:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"npm install chai\")), mdx(\"h3\", null, \"Assert url\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// require assert from chai module\\nconst assert = require('chai').assert;\\n\\n// use this one in your test\\nconst url = browser.getUrl();\\nassert.equal(url, 'https://www.google.com', 'Url mismatch');\\n\")), mdx(\"h3\", null, \"Assert text === 'expected text'\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// require assert from chai module\\nconst assert = require('chai').assert;\\n\\n// use this one in your test\\nconst actualText = $('#fakeTextId').getText();\\nconst expectedText = 'Expected fake text';\\nassert.equal(actualText, expectedText, 'Our fake text did not match expected one');\\n\")), mdx(\"h3\", null, \"Assert true\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// require assert from chai module\\nconst assert = require('chai').assert;\\n\\n// use this one in your test\\nconst loggedInUserIcon = $('#fakeIconId').isExisting();\\nassert.isTrue(loggedInUserIcon, 'User was not logged in');\\n\")), mdx(\"h3\", null, \"Assert false\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// require assert from chai module\\nconst assert = require('chai').assert;\\n\\n// use this one in your test\\nconst usernameTextfield = $('#fakeUsernameTxtId').isExisting();\\nassert.isFalse(usernameTextfield, 'User was not logged out');\\n\")), mdx(\"p\", null, \"See entire list of assertions at: \", mdx(\"a\", {\n    href: \"https://www.chaijs.com/guide/styles/#assert\"\n  }, \"chais website\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#assertions","title":"Assertions"},{"url":"#wairfor-as-a-way-of-assertion","title":"WairFor... as a way of assertion"},{"url":"#assert-module-as-a-way-of-assertion","title":"Assert module as a way of assertion","items":[{"items":[{"url":"#assert-url","title":"Assert url"},{"url":"#assert-text--expected-text","title":"Assert text === 'expected text'"},{"url":"#assert-true","title":"Assert true"},{"url":"#assert-false","title":"Assert false"}]}]}]},"parent":{"__typename":"File","relativePath":"automation/8-Assertions.md"},"frontmatter":{"metaTitle":"WebdriverIO assertions with Chai and not only","metaDescription":"Learn how to use assertions with Codemify"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/automation","title":"Automation testing"}}},{"node":{"fields":{"slug":"/automation/4-WaitUntil usage examples","title":"4. How to use waitUntil?"}}},{"node":{"fields":{"slug":"/wdio_integrations/1-Visual-Regression-Webdirverio","title":"1. Visual Regression"}}},{"node":{"fields":{"slug":"/about","title":"About us"}}},{"node":{"fields":{"slug":"/wdio_integrations/2-Docker","title":"2. How to Dockerize WDIO"}}},{"node":{"fields":{"slug":"/introduction","title":"Courses Information"}}},{"node":{"fields":{"slug":"/starter/3-Types-of-testing","title":"3. Testing types and methods"}}},{"node":{"fields":{"slug":"/api","title":"API Testing"}}},{"node":{"fields":{"slug":"/","title":"Welcome to Codemify Academy"}}},{"node":{"fields":{"slug":"/interview","title":"Interview"}}},{"node":{"fields":{"slug":"/wdio_integrations/4-Video-reporter","title":"4. Video reporter"}}},{"node":{"fields":{"slug":"/about/privacy-policy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/wdio_integrations/3-How-to-install-allure-reporter","title":"3. Allure reporter"}}},{"node":{"fields":{"slug":"/starter","title":"Starter"}}},{"node":{"fields":{"slug":"/about/course-agreement","title":"Course Agreement"}}},{"node":{"fields":{"slug":"/about/Terms-of-use","title":"Terms of use"}}},{"node":{"fields":{"slug":"/nodejs","title":"NodeJS"}}},{"node":{"fields":{"slug":"/starter/4-Test-cases","title":"4. Test cases"}}},{"node":{"fields":{"slug":"/api/1-What-is-api","title":"1. What is API?"}}},{"node":{"fields":{"slug":"/automation/1-Automation-with-WebdriverIO","title":"1. Automation with WebdriverIO"}}},{"node":{"fields":{"slug":"/wdio_integrations","title":"WDIO Integrations"}}},{"node":{"fields":{"slug":"/git","title":"Git, and how to use it"}}},{"node":{"fields":{"slug":"/starter/2-Bug-reports","title":"2. Bug reports"}}},{"node":{"fields":{"slug":"/starter/1-Starter","title":"1. QA Basics"}}},{"node":{"fields":{"slug":"/git/1-git-vs-github","title":"Git and Github"}}},{"node":{"fields":{"slug":"/nodejs/1-how-to-install-nodejs","title":"1. How to install NodeJS and npm"}}},{"node":{"fields":{"slug":"/git/2-git-situations-for-newbies","title":"Git situations for newbies"}}},{"node":{"fields":{"slug":"/interview/interview","title":"Interview questions"}}},{"node":{"fields":{"slug":"/git/3-git-how-to-check-pull-requests","title":"Git how to check pull requests"}}},{"node":{"fields":{"slug":"/automation/3-What-is-wdio-conf-js","title":"3. What is wdio.conf.js?"}}},{"node":{"fields":{"slug":"/automation/6-CSS-Selectors","title":"6. CSS Selectors for Automation"}}},{"node":{"fields":{"slug":"/automation/5-How-to-use-map-method-in-automation","title":"5. How to use MAP?"}}},{"node":{"fields":{"slug":"/automation/8-Assertions","title":"8. Assertions"}}},{"node":{"fields":{"slug":"/automation/7-The-power-of-XPath","title":"7. The Power Of XPath"}}},{"node":{"fields":{"slug":"/automation/2-Page-Object-Model copy","title":"2. Page Object Model"}}},{"node":{"fields":{"slug":"/automation/9-Errors-explanation","title":"9. JS Automation test errors explanation"}}},{"node":{"fields":{"slug":"/api/2. API-testing-with-postman","title":"2. API testing with postman?"}}},{"node":{"fields":{"slug":"/api/3-How-to-test-apis","title":"4. How to test API?"}}},{"node":{"fields":{"slug":"/api/4-API-status-codes","title":"3. API status codes"}}}]}},"pageContext":{"id":"12fbf999-3a63-595a-bd10-3521c754f284"}},"staticQueryHashes":["1685914912","1685914912","2619113677","2619113677","3706406642","3706406642"]}