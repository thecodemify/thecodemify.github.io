{"componentChunkName":"component---src-templates-docs-js","path":"/automation/1-Automation-with-WebdriverIO","result":{"data":{"site":{"siteMetadata":{"title":"Codemify | Software QA Automation Academy","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"70e87e87-0030-5ae3-8bad-f6c284f44fe6","title":"1. Automation with WebdriverIO","slug":"/automation/1-Automation-with-WebdriverIO"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"1. Automation with WebdriverIO\",\n  \"metaTitle\": \"WebdriverIO from zero to hero. Instagram example\",\n  \"metaDescription\": \"Learn how to write Automation from scratch with Codemify\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"How to install WebdriverIO automation framework and run it. Instagram example\"), mdx(\"h2\", null, \"Requirements:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Macbook\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"npm installed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IDE\")), mdx(\"h3\", null, \"Execute following steps in your IDE. I will use Visual Studio Code AKA VS Code\"), mdx(\"h1\", null, \"1. Open terminal, create automation folder, and get in it by running:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"mkdir automation && cd automation\\n\")), mdx(\"h1\", null, \"2. Run this command to create default package.json file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"npm init -y\\n\")), mdx(\"h1\", null, \"3. Now install command line tool from webdriverIO:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"npm i --save-dev @wdio/cli\\n\")), mdx(\"h1\", null, \"4. Generate configuration file for your framework:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"./node_modules/.bin/wdio config -y\\n\")), mdx(\"h1\", null, \"5. In your wdio.conf.js file update specs section to be like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"specs: [\\n        './specs/**/*.js'\\n    ],\\n\")), mdx(\"h1\", null, \"6. Create \\u2019specs\\u2019 folder where you will store all testing files and folder login inside of it:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"mkdir -p ./specs/login\\n\")), mdx(\"h1\", null, \"7. Create first test file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"touch specs/login/login-spec.js\\n\")), mdx(\"h1\", null, \"8. Add following code to your newly created login-spec file from step above. Don't forget to update instagram username and password in the code below to yours.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const loginUrl = 'https://www.instagram.com/accounts/login/?source=auth_switcher';\\nconst timeout = 20000;\\n\\ndescribe('Login', () => {\\n    it('should not be able to login with none matching credentials', () => {\\n        // Declare and assign username and password consts\\n        const username = 'YourUsername';\\n        const password = 'YourPassword';\\n\\n        // Navigate to login page\\n        browser.url(loginUrl)\\n\\n        // Type in username, password, and click login\\n        $('[name=\\\"username\\\"]').setValue(username);\\n        $('[name=\\\"password\\\"]').setValue(password);\\n        $('div=Log In').click();\\n\\n        // Wait for error message\\n        $('#slfErrorAlert').waitForDisplayed();\\n    })\\n})\\n\")), mdx(\"h1\", null, \"9. Remove default test folder that we not gonna use\"), mdx(\"h1\", null, \"10. Run your test from terminal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"./node_modules/.bin/wdio wdio.conf.js\\n\")), mdx(\"p\", null, \"Wolla, you got it!\"), mdx(\"p\", null, \"Good luck ;)\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"items":[{"url":"#how-to-install-webdriverio-automation-framework-and-run-it-instagram-example","title":"How to install WebdriverIO automation framework and run it. Instagram example"}]},{"url":"#requirements","title":"Requirements:","items":[{"url":"#execute-following-steps-in-your-ide-i-will-use-visual-studio-code-aka-vs-code","title":"Execute following steps in your IDE. I will use Visual Studio Code AKA VS Code"}]}]},{"url":"#1-open-terminal-create-automation-folder-and-get-in-it-by-running","title":"1. Open terminal, create automation folder, and get in it by running:"},{"url":"#2-run-this-command-to-create-default-packagejson-file","title":"2. Run this command to create default package.json file:"},{"url":"#3-now-install-command-line-tool-from-webdriverio","title":"3. Now install command line tool from webdriverIO:"},{"url":"#4-generate-configuration-file-for-your-framework","title":"4. Generate configuration file for your framework:"},{"url":"#5-in-your-wdioconfjs-file-update-specs-section-to-be-like-this","title":"5. In your wdio.conf.js file update specs section to be like this:"},{"url":"#6-create-specs-folder-where-you-will-store-all-testing-files-and-folder-login-inside-of-it","title":"6. Create ’specs’ folder where you will store all testing files and folder login inside of it:"},{"url":"#7-create-first-test-file","title":"7. Create first test file:"},{"url":"#8-add-following-code-to-your-newly-created-login-spec-file-from-step-above-dont-forget-to-update-instagram-username-and-password-in-the-code-below-to-yours","title":"8. Add following code to your newly created login-spec file from step above. Don't forget to update instagram username and password in the code below to yours."},{"url":"#9-remove-default-test-folder-that-we-not-gonna-use","title":"9. Remove default test folder that we not gonna use"},{"url":"#10-run-your-test-from-terminal","title":"10. Run your test from terminal:"}]},"parent":{"__typename":"File","relativePath":"automation/1-Automation-with-WebdriverIO.md"},"frontmatter":{"metaTitle":"WebdriverIO from zero to hero. Instagram example","metaDescription":"Learn how to write Automation from scratch with Codemify"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/automation","title":"Automation testing"}}},{"node":{"fields":{"slug":"/automation/4-WaitUntil usage examples","title":"4. How to use waitUntil?"}}},{"node":{"fields":{"slug":"/wdio_integrations/1-Visual-Regression-Webdirverio","title":"1. Visual Regression"}}},{"node":{"fields":{"slug":"/about","title":"About us"}}},{"node":{"fields":{"slug":"/wdio_integrations/2-Docker","title":"2. How to Dockerize WDIO"}}},{"node":{"fields":{"slug":"/introduction","title":"Courses Information"}}},{"node":{"fields":{"slug":"/starter/3-Types-of-testing","title":"3. Testing types and methods"}}},{"node":{"fields":{"slug":"/api","title":"API Testing"}}},{"node":{"fields":{"slug":"/","title":"Welcome to Codemify Academy"}}},{"node":{"fields":{"slug":"/interview","title":"Interview"}}},{"node":{"fields":{"slug":"/wdio_integrations/4-Video-reporter","title":"4. Video reporter"}}},{"node":{"fields":{"slug":"/about/privacy-policy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/wdio_integrations/3-How-to-install-allure-reporter","title":"3. Allure reporter"}}},{"node":{"fields":{"slug":"/starter","title":"Starter"}}},{"node":{"fields":{"slug":"/about/course-agreement","title":"Course Agreement"}}},{"node":{"fields":{"slug":"/about/Terms-of-use","title":"Terms of use"}}},{"node":{"fields":{"slug":"/nodejs","title":"NodeJS"}}},{"node":{"fields":{"slug":"/wdio_integrations","title":"WDIO Integrations"}}},{"node":{"fields":{"slug":"/git","title":"Git, and how to use it"}}},{"node":{"fields":{"slug":"/starter/2-Bug-reports","title":"2. Bug reports"}}},{"node":{"fields":{"slug":"/starter/1-Starter","title":"1. QA Basics"}}},{"node":{"fields":{"slug":"/git/1-git-vs-github","title":"Git and Github"}}},{"node":{"fields":{"slug":"/nodejs/1-how-to-install-nodejs","title":"1. How to install NodeJS and npm"}}},{"node":{"fields":{"slug":"/git/2-git-situations-for-newbies","title":"Git situations for newbies"}}},{"node":{"fields":{"slug":"/interview/interview","title":"Interview questions"}}},{"node":{"fields":{"slug":"/automation/1-Automation-with-WebdriverIO","title":"1. Automation with WebdriverIO"}}},{"node":{"fields":{"slug":"/git/3-git-how-to-check-pull-requests","title":"Git how to check pull requests"}}},{"node":{"fields":{"slug":"/automation/3-What-is-wdio-conf-js","title":"3. What is wdio.conf.js?"}}},{"node":{"fields":{"slug":"/automation/6-CSS-Selectors","title":"6. CSS Selectors for Automation"}}},{"node":{"fields":{"slug":"/automation/5-How-to-use-map-method-in-automation","title":"5. How to use MAP?"}}},{"node":{"fields":{"slug":"/automation/8-Assertions","title":"8. Assertions"}}},{"node":{"fields":{"slug":"/automation/7-The-power-of-XPath","title":"7. The Power Of XPath"}}},{"node":{"fields":{"slug":"/automation/2-Page-Object-Model copy","title":"2. Page Object Model"}}},{"node":{"fields":{"slug":"/api/1-What-is-api","title":"1. What is API?"}}},{"node":{"fields":{"slug":"/automation/9-Errors-explanation","title":"9. JS Automation test errors explanation"}}},{"node":{"fields":{"slug":"/api/2. API-testing-with-postman","title":"2. API testing with postman?"}}},{"node":{"fields":{"slug":"/api/3-How-to-test-apis","title":"4. How to test API?"}}},{"node":{"fields":{"slug":"/api/4-API-status-codes","title":"3. API status codes"}}}]}},"pageContext":{"id":"70e87e87-0030-5ae3-8bad-f6c284f44fe6"}},"staticQueryHashes":["1685914912","1685914912","2619113677","2619113677","3706406642","3706406642"]}