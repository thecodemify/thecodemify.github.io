{"componentChunkName":"component---src-templates-docs-js","path":"/automation/3-What-is-wdio-conf-js","result":{"data":{"site":{"siteMetadata":{"title":"Codemify | Software QA Automation Academy","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"6c5a95c0-7f6c-5b2b-b95f-cb4c5ac33e26","title":"3. What is wdio.conf.js?","slug":"/automation/3-What-is-wdio-conf-js"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"3. What is wdio.conf.js?\",\n  \"metaTitle\": \"WebdriverIO configuration file explanation\",\n  \"metaDescription\": \"Learn how to use wdio.cong.js file with Codemify\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"WDIO team did a really good job on explaining their config file. But here are another way of looking at it:\"), mdx(\"h1\", null, \"Runner\"), mdx(\"p\", null, \"You will most likely run your code on local runner mode. Although, some companies prefer to pay for cloud services like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://saucelabs.com\"\n  }), \"Sauce Labs\"), \", or run your tests in Google Cloud Platform. In a code from previous articles you see runner: \\\"local\\\" as a part of config file. Here is an example how you could run your tests in a GCP:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"hostname: '31.55.77.117', // Hostname example AKA your GCP machine address\\nport: 4444, //Port number\\nuser: '', // Username\\nkey: '', // Password\\n\")), mdx(\"h1\", null, \"Path\"), mdx(\"p\", null, \"We will use default path as we use chromedriver. In a case with running your tests remotely, I've commented out path since I've used Selenoid instead of selenium hub. But you don't need to worry about it, Chromedriver works fine and will be way enough for you to start with.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// Override default path ('/wd/hub') for chromedriver service.\\npath: '/',\\n\")), mdx(\"h1\", null, \"Specs\"), mdx(\"p\", null, \"Specs is a simple key of this big conf object that we export. It essentially defines files that we can run with command that runs all spec files. Run \\\"npx wdio\\\" to make sure it works. Then change specs path to anything else and you will get an error upon running same npx wdio. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"specs: [\\n        './specs/**/*.js'\\n    ],\\n\\n\")), mdx(\"h1\", null, \"Exclude\"), mdx(\"p\", null, \"Exclude does an opposite. It excludes files that wanna run. Test it out by including one of your specs in exclude and then run same \\\"npx wdio\\\" command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"exclude: [\\n        // './specs/login/login-specjs'\\n    ],\\n\")), mdx(\"h1\", null, \"MaxInstances\"), mdx(\"p\", null, \"MaxInstances defines how many files you wanna run simultaneously AKA how many threads\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"maxInstances: 10,\\n\")), mdx(\"h1\", null, \"Capabilities\"), mdx(\"p\", null, \"With capabilities you can define a lot of things like: browser to use, browser version, window size, enable video recording etc.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"    capabilities: [{\\n        // maxInstances can get overwritten per capability. So if you have an in-house Selenium\\n        // grid with only 5 firefox instances available you can make sure that not more than\\n        // 5 instances get started at a time.\\n        maxInstances: 5,\\n        //\\n        browserName: 'chrome',\\n        'goog:chromeOptions': {\\n            w3c: false,\\n            args: ['window-size=1920,1080', // - full screen size\\n                'headless', // - run automation with or without actual browser. Headless === without\\n                \\\"no-sandbox\\\", // - this flag is needed in order to run automation in docker container\\n                \\\"disable-gpu\\\"] // - this flag is needed in order to run automation in docker container\\n        }\\n        // If outputDir is provided WebdriverIO can capture driver session logs\\n        // it is possible to configure which logTypes to include/exclude.\\n        // excludeDriverLogs: ['*'], // pass '*' to exclude all driver session logs\\n        // excludeDriverLogs: ['bugreport', 'server'],\\n    }],\\n\")), mdx(\"h1\", null, \"LogLevel\"), mdx(\"p\", null, \"Log level defines how much of the logs we wanna get. I prefer to use 'error' level. Try it out your self and run tests to see difference.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"logLevel: 'error'\\n\")), mdx(\"h1\", null, \"Bail\"), mdx(\"p\", null, \"Bail defines when should we bail out :) Example. 1 will force our automation to finish after anyone of our tests fail. 2 will do the same but after two tests have failed. You got it, right?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \" bail: 0\\n\")), mdx(\"h1\", null, \"BaseUrl\"), mdx(\"p\", null, \"BaseUrl speaks of itself. It defines base url for our tests. I'll add instagram since that's the proj that we are automating here. You can use it just by passing './' to your url method. Example: browser.url('./');\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"baseUrl: 'http://instagram.com',\\n\")), mdx(\"h1\", null, \"WaitforTimeout\"), mdx(\"p\", null, \"Any of the wait commands in out framework(waitForDisplayed, waitForExist, waitForClickable etc) will use this timeout if you pass undefined into it. See example below: \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// Default timeout for all waitFor* commands.\\n    waitforTimeout: 10000,\\n// Usage example:\\nthis.loginPage.loginLnk.waitForDisplayed(undefined, false, 'This error message in element not found');\\n\")), mdx(\"p\", null, \"To be continued\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#runner","title":"Runner"},{"url":"#path","title":"Path"},{"url":"#specs","title":"Specs"},{"url":"#exclude","title":"Exclude"},{"url":"#maxinstances","title":"MaxInstances"},{"url":"#capabilities","title":"Capabilities"},{"url":"#loglevel","title":"LogLevel"},{"url":"#bail","title":"Bail"},{"url":"#baseurl","title":"BaseUrl"},{"url":"#waitfortimeout","title":"WaitforTimeout"}]},"parent":{"__typename":"File","relativePath":"automation/3-What-is-wdio-conf-js.md"},"frontmatter":{"metaTitle":"WebdriverIO configuration file explanation","metaDescription":"Learn how to use wdio.cong.js file with Codemify"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/automation","title":"Automation testing"}}},{"node":{"fields":{"slug":"/automation/4-WaitUntil usage examples","title":"4. How to use waitUntil?"}}},{"node":{"fields":{"slug":"/wdio_integrations/1-Visual-Regression-Webdirverio","title":"1. Visual Regression"}}},{"node":{"fields":{"slug":"/about","title":"About us"}}},{"node":{"fields":{"slug":"/wdio_integrations/2-Docker","title":"2. How to Dockerize WDIO"}}},{"node":{"fields":{"slug":"/introduction","title":"Courses Information"}}},{"node":{"fields":{"slug":"/starter/3-Types-of-testing","title":"3. Testing types and methods"}}},{"node":{"fields":{"slug":"/api","title":"API Testing"}}},{"node":{"fields":{"slug":"/","title":"Welcome to Codemify Academy"}}},{"node":{"fields":{"slug":"/wdio_integrations/3-How-to-install-allure-reporter","title":"3. Allure reporter"}}},{"node":{"fields":{"slug":"/interview","title":"Interview"}}},{"node":{"fields":{"slug":"/starter","title":"Starter"}}},{"node":{"fields":{"slug":"/nodejs","title":"NodeJS"}}},{"node":{"fields":{"slug":"/wdio_integrations","title":"WDIO Integrations"}}},{"node":{"fields":{"slug":"/git","title":"Git, and how to use it"}}},{"node":{"fields":{"slug":"/starter/2-Bug-reports","title":"2. Bug reports"}}},{"node":{"fields":{"slug":"/starter/1-Starter","title":"1. QA Basics"}}},{"node":{"fields":{"slug":"/git/1-git-vs-github","title":"Git and Github"}}},{"node":{"fields":{"slug":"/nodejs/1-how-to-install-nodejs","title":"1. How to install NodeJS and npm"}}},{"node":{"fields":{"slug":"/git/2-git-situations-for-newbies","title":"Git situations for newbies"}}},{"node":{"fields":{"slug":"/interview/interview","title":"Interview questions"}}},{"node":{"fields":{"slug":"/automation/1-Automation-with-WebdriverIO","title":"1. Automation with WebdriverIO"}}},{"node":{"fields":{"slug":"/git/3-git-how-to-check-pull-requests","title":"Git how to check pull requests"}}},{"node":{"fields":{"slug":"/automation/3-What-is-wdio-conf-js","title":"3. What is wdio.conf.js?"}}},{"node":{"fields":{"slug":"/automation/6-CSS-Selectors","title":"6. CSS Selectors for Automation"}}},{"node":{"fields":{"slug":"/automation/5-How-to-use-map-method-in-automation","title":"5. How to use MAP?"}}},{"node":{"fields":{"slug":"/automation/8-Assertions","title":"8. Assertions"}}},{"node":{"fields":{"slug":"/automation/7-The-power-of-XPath","title":"7. The Power Of XPath"}}},{"node":{"fields":{"slug":"/automation/2-Page-Object-Model copy","title":"2. Page Object Model"}}},{"node":{"fields":{"slug":"/api/1-What-is-api","title":"1. What is API?"}}},{"node":{"fields":{"slug":"/automation/9-Errors-explanation","title":"9. JS Automation test errors explanation"}}},{"node":{"fields":{"slug":"/api/2. API-testing-with-postman","title":"2. API testing with postman?"}}},{"node":{"fields":{"slug":"/api/3-How-to-test-apis","title":"4. How to test API?"}}},{"node":{"fields":{"slug":"/api/4-API-status-codes","title":"3. API status codes"}}},{"node":{"fields":{"slug":"/about/about","title":"Privacy Policy"}}}]}},"pageContext":{"id":"6c5a95c0-7f6c-5b2b-b95f-cb4c5ac33e26"}},"staticQueryHashes":["1685914912","1685914912","2619113677","2619113677","3706406642","3706406642"]}