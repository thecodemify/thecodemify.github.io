{"componentChunkName":"component---src-templates-docs-js","path":"/git/3-git-how-to-check-pull-requests","result":{"data":{"site":{"siteMetadata":{"title":"Codemify | Software QA Automation Academy","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"a9d52fa3-1ff7-5b3c-8842-303e8e4ec279","title":"Git how to check pull requests","slug":"/git/3-git-how-to-check-pull-requests"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Git how to check pull requests\",\n  \"metaTitle\": \"How to check git pull requests\",\n  \"metaDescription\": \"Learn how to check pull requests with Codemify\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What to look for in a pull request?\"), mdx(\"p\", null, \"Everyone needs to check their pull requests, and PRs of their coworkers. Here is a basic list of what to check for:\"), mdx(\"h3\", null, \"Before you push your code\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run git diff command and check all your changes line by line\")), mdx(\"h3\", null, \"After you push your code and about to create PR\"), mdx(\"p\", null, \"Ask your self these questions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Did I leave any .pause .only .debug(webdriverIO specific) in my code?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Did I beatify my code before committing?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Did I leave one space between each function/hook?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Did I not use xpath from browser? You can build it your self to make it efficient, but don't copy whatever browser spins to you\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Am I sure this test/file needs to live in this location? Example: if you write login test, it needs to live in login-spec.js\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Did I end every test with assertion? Do not end tests with a click, type, or similar action. You need verify result of your previous actions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"MAKE YOUR TESTS(assertions) FAIL AT LEAST ONCE to make sure this test is legit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cleanup: remove unused comments, spaces, code?\")), mdx(\"p\", null, \"More to be added ..\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-to-look-for-in-a-pull-request","title":"What to look for in a pull request?","items":[{"url":"#before-you-push-your-code","title":"Before you push your code"},{"url":"#after-you-push-your-code-and-about-to-create-pr","title":"After you push your code and about to create PR"}]}]},"parent":{"__typename":"File","relativePath":"git/3-git-how-to-check-pull-requests.md"},"frontmatter":{"metaTitle":"How to check git pull requests","metaDescription":"Learn how to check pull requests with Codemify"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/automation","title":"Automation testing"}}},{"node":{"fields":{"slug":"/automation/4-WaitUntil usage examples","title":"4. How to use waitUntil?"}}},{"node":{"fields":{"slug":"/about","title":"About us"}}},{"node":{"fields":{"slug":"/api","title":"API Testing"}}},{"node":{"fields":{"slug":"/interview","title":"Interview"}}},{"node":{"fields":{"slug":"/","title":"Welcome to Codemify Academy"}}},{"node":{"fields":{"slug":"/starter","title":"Starter"}}},{"node":{"fields":{"slug":"/nodejs","title":"NodeJS"}}},{"node":{"fields":{"slug":"/introduction","title":"Courses Information"}}},{"node":{"fields":{"slug":"/wdio_integrations","title":"WDIO Integrations"}}},{"node":{"fields":{"slug":"/git","title":"Git, and how to use it"}}},{"node":{"fields":{"slug":"/wdio_integrations/1-Visual-Regression-Webdirverio","title":"1. Visual Regression"}}},{"node":{"fields":{"slug":"/starter/2-Bug-reports","title":"2. Bug reports"}}},{"node":{"fields":{"slug":"/starter/1-Starter","title":"1. QA Basics"}}},{"node":{"fields":{"slug":"/starter/3-Types-of-testing","title":"3. Testing types and methods"}}},{"node":{"fields":{"slug":"/git/1-git-vs-github","title":"Git and Github"}}},{"node":{"fields":{"slug":"/nodejs/1-how-to-install-nodejs","title":"1. How to install NodeJS and npm"}}},{"node":{"fields":{"slug":"/git/2-git-situations-for-newbies","title":"Git situations for newbies"}}},{"node":{"fields":{"slug":"/interview/interview","title":"Interview questions"}}},{"node":{"fields":{"slug":"/automation/1-Automation-with-WebdriverIO","title":"1. Automation with WebdriverIO"}}},{"node":{"fields":{"slug":"/git/3-git-how-to-check-pull-requests","title":"Git how to check pull requests"}}},{"node":{"fields":{"slug":"/automation/3-What-is-wdio-conf-js","title":"3. What is wdio.conf.js?"}}},{"node":{"fields":{"slug":"/automation/6-CSS-Selectors","title":"6. CSS Selectors for Automation"}}},{"node":{"fields":{"slug":"/automation/5-How-to-use-map-method-in-automation","title":"5. How to use MAP?"}}},{"node":{"fields":{"slug":"/automation/8-Assertions","title":"8. Assertions"}}},{"node":{"fields":{"slug":"/automation/7-The-power-of-XPath","title":"7. The Power Of XPath"}}},{"node":{"fields":{"slug":"/automation/2-Page-Object-Model copy","title":"2. Page Object Model"}}},{"node":{"fields":{"slug":"/api/1-What-is-api","title":"1. What is API?"}}},{"node":{"fields":{"slug":"/automation/9-Errors-explanation","title":"9. JS Automation test errors explanation"}}},{"node":{"fields":{"slug":"/api/2. API-testing-with-postman","title":"2. API testing with postman?"}}},{"node":{"fields":{"slug":"/api/3-How-to-test-apis","title":"4. How to test API?"}}},{"node":{"fields":{"slug":"/api/4-API-status-codes","title":"3. API status codes"}}},{"node":{"fields":{"slug":"/about/about","title":"Privacy Policy"}}}]}},"pageContext":{"id":"a9d52fa3-1ff7-5b3c-8842-303e8e4ec279"}},"staticQueryHashes":["1685914912","1685914912","2619113677","2619113677","3706406642","3706406642"]}